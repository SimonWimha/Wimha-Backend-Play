# This is the main configuration file for the application.
# ~~~~~

# VAL boolean to know which conf use
is_val=true

# URL to redirect for facebook notif, mails, etc any call to action
val_url="http://val.wimha.com"
prod_url="http://www.wimha.com"
dev_url="http://dev.wimha.com:9000"
test_url="http://localhost:3333"

# Time of assets in cache
assets.defaultCache="max-age=31556926"

# Apply evolutions in prod too
applyEvolutions.default=true
applyDownEvolutions.default=true

# Time of session when user logs in
session.maxAge=2678400

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions (password encryption, cookies signing).
# If you deploy your application to several instances be sure to use the same key!
application.secret="REPLACE WITH YOUR PRIVATE KEY"

# The application languages
# ~~~~~
application.langs="en,fr"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=Global

# Database configuration
# ~~~~~ 
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#

# these parameters are used for dev

#db.default.driver=org.postgresql.Driver
#db.default.url="jdbc:postgresql://localhost:5432/wimha"
#db.default.user=wimha
#db.default.password=wimha

# Set a connection's default autocommit setting
db.default.autocommit=true

# Set a connection's default isolation level
db.default.isolation=READ_COMMITTED

# In order to reduce lock contention and thus improve performance, 
# each incoming connection request picks off a connection from a 
# pool that has thread-affinity. 
# The higher this number, the better your performance will be for the 
# case when you have plenty of short-lived threads. 
# Beyond a certain threshold, maintenance of these pools will start 
# to have a negative effect on performance (and only for the case 
# when connections on a partition start running out).
db.default.partitionCount=1

# The number of connections to create per partition. Setting this to 
# 5 with 3 partitions means you will have 15 unique connections to the 
# database. Note that BoneCP will not create all these connections in 
# one go but rather start off with minConnectionsPerPartition and 
# gradually increase connections as required.
db.default.maxConnectionsPerPartition=5

# The number of initial connections, per partition.
db.default.minConnectionsPerPartition=5

# When the available connections are about to run out, BoneCP will 
# dynamically create new ones in batches. This property controls 
# how many new connections to create in one go (up to a maximum of 
# maxConnectionsPerPartition). Note: This is a per-partition setting.
db.default.acquireIncrement=1

# After attempting to acquire a connection and failing, try to 
# connect this number of times before giving up.
db.default.acquireRetryAttempts=10

# How long to wait before attempting to obtain a 
# connection again after a failure.
db.default.acquireRetryDelay=5 seconds

# The maximum time to wait before a call 
# to getConnection is timed out.
db.default.connectionTimeout=20 second

# Idle max age
db.default.idleMaxAge=10 minute

# This sets the time for a connection to remain idle before sending a test query to the DB. 
# This is useful to prevent a DB from timing out connections on its end. 
db.default.idleConnectionTestPeriod=30 seconds

# An initial SQL statement that is run only when 
# a connection is first created.
db.default.initSQL="SELECT 1"

# If enabled, log SQL statements being executed.
db.default.logStatements=false

# The maximum connection age.
db.default.maxConnectionAge=0

#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled



# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
#
ebean.default="models.*"

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root=ERROR

logger.com.jolbox=DEBUG

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# put more Akka threads (see http://www.jamesward.com/2012/06/25/optimizing-play-2-for-database-driven-apps)
play {
    akka {
        actor {
            deployment {
                /actions {
                    router = round-robin
                    nr-of-instances = 100
                }
                /promises {
                    router = round-robin
                    nr-of-instances = 100
                }
            }
            retrieveBodyParserTimeout = 5 seconds
            actions-dispatcher = {
                fork-join-executor {
                    parallelism-factor = 100
                    parallelism-max = 100
                }
            }
            promises-dispatcher = {
                fork-join-executor {
                    parallelism-factor = 100
                    parallelism-max = 100
                }
            }
        }
    }
}

include "external_services.conf"
